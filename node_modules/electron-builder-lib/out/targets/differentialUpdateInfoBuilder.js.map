{"version":3,"file":"differentialUpdateInfoBuilder.js","sourceRoot":"","sources":["../../src/targets/differentialUpdateInfoBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEA6DO,AAAK,WAAyB,AAAY;AAC/C,AAAG,kDAAC,AAAI,KAAC,EAAC,AAAI,MAAE,AAAG,0CAAC,AAAQ,SAAC,AAAI,AAAC,AAAC,SAAE,AAA6B,AAAC;AACnE,AAAM,eAAC,AAAI,KAAC,AAAK,OAAC,MAAM,AAAI,iDAAC,MAAM,AAAiB,AAAE,qDAAE,CAAC,AAAU,YAAE,AAAS,WAAE,AAAI,MAAE,AAAe,iBAAE,AAAS,AAAC,AAAC,AAAC,AACrH;AAAC,AAED,AAAM;;;;;;;;qEAAC,AAAK,WAAyB,AAAY,MAAE,AAAc,QAAE,AAA+B,UAAE,AAA+B;AACjI,cAAM,AAAY,AAAG,kBAAG,AAAI,OAAG,AAAqB,qBAAE;AACtD,AAAG,kDAAC,AAAI,KAAC,EAAC,AAAY,cAAE,AAAG,0CAAC,AAAQ,SAAC,AAAY,AAAC,AAAC,iBAAE,AAAoB,AAAC;AAC1E,cAAM,AAAU,aAAuB,AAAI,KAAC,AAAK,OAAC,MAAM,AAAI,iDAAC,MAAM,AAAiB,AAAE,qDAAE,CAAC,AAAU,YAAE,AAAS,WAAE,AAAI,MAAE,AAAU,YAAE,AAAY,AAAC,AAAC,AAAC;AACjJ,AAAQ,iBAAC,AAAI,KAAC,AAAuB;AACnC,AAAI,kBAAE,AAAY;AAClB,AAAgB,AAAE,iCAAG,AAAgB,mBAAG,AAAqB,qBAAE;AAC/D,AAAM;AACN,AAAI,kBAAE,AAAI;AACV,AAAQ;AACR,AAAU,AACX,AAAC;AAPoC;AAQtC,AAAM,eAAC,AAAU,AACnB;AAAC;;;;;;;;;;;;;;AA/ED,AAAO,AAAE,AAAI,AAAE,AAAG,AAAE,AAAM,AAAc;;;;AAExC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAI5B,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAS,AAE3C,AAAM;;;;;;AAAC,MAAM,AAAqB,wDAAG,AAAW,AAEhD,AAAM;6CAA8C,AAAoB,cAAE,AAAiD;AACzH,AAAE,AAAC,QAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACzB,AAAM,eAAC,AAAI,AACb;AAAC;AAED,UAAM,AAAI,OAAG,AAAM,OAAC,AAAI,KAAC,AAAY,AAAC;AACtC,AAAE,AAAC,QAAC,AAAI,KAAC,AAAM,UAAI,AAAC,AAAC,GAAC,AAAC;AACrB,AAAM,eAAC,AAAI,AACb;AAAC;AAED,UAAM,AAAQ,WAAwC,AAAE;AACxD,AAAG,AAAC,SAAC,MAAM,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACxB,cAAM,AAAe,kBAAG,AAAY,aAAC,AAAI,AAAC;AAC1C,AAAQ,iBAAC,AAAI,AAAC,0BACT,AAAe,mBAClB,AAAI,MAAE,AAAI,MAAC,AAAQ,SAAC,AAAe,gBAAC,AAAI,AAAC,AAC1C,AACH;AAAC;AACD,AAAM,WAAC,EAAC,AAAQ,AAAC,AACnB;AAAC,AAED,AAAM;kDAAmD,AAA8B;AACrF,AAoBG;;;;;;;;;;;;;;AACH,AAAc,mBAAC,AAAQ,WAAG,AAAC;AAC3B,AAAqD;AACrD,AAAc,mBAAC,AAAK,QAAG,AAAK;AAC5B,AAAuE;AACvE,AAAc,mBAAC,AAAW,cAAG,AAAQ;AACrC,AAAM,WAAC,AAAc,AACvB;AAAC,AAED,AAAM","sourcesContent":["import { exec, log } from \"builder-util\"\nimport { BlockMapDataHolder, PackageFileInfo } from \"builder-util-runtime\"\nimport * as path from \"path\"\nimport { Target } from \"../core\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { ArchiveOptions } from \"./archive\"\nimport { getAppBuilderTool } from \"./tools\"\n\nexport const BLOCK_MAP_FILE_SUFFIX = \".blockmap\"\n\nexport function createNsisWebDifferentialUpdateInfo(artifactPath: string, packageFiles: { [arch: string]: PackageFileInfo }) {\n  if (packageFiles == null) {\n    return null\n  }\n\n  const keys = Object.keys(packageFiles)\n  if (keys.length <= 0) {\n    return null\n  }\n\n  const packages: { [arch: string]: PackageFileInfo } = {}\n  for (const arch of keys) {\n    const packageFileInfo = packageFiles[arch]\n    packages[arch] = {\n      ...packageFileInfo,\n      path: path.basename(packageFileInfo.path)\n    }\n  }\n  return {packages}\n}\n\nexport function configureDifferentialAwareArchiveOptions(archiveOptions: ArchiveOptions): ArchiveOptions {\n  /*\n   * dict size 64 MB: Full: 33,744.88 KB, To download: 17,630.3 KB (52%)\n   * dict size 16 MB: Full: 33,936.84 KB, To download: 16,175.9 KB (48%)\n   * dict size  8 MB: Full: 34,187.59 KB, To download:  8,229.9 KB (24%)\n   * dict size  4 MB: Full: 34,628.73 KB, To download: 3,782.97 KB (11%)\n\n   as we can see, if file changed in one place, all block is invalidated (and update size approximately equals to dict size)\n\n   1 MB is used:\n\n   1MB:\n\n   2018/01/11 11:54:41:0045 File has 59 changed blocks\n   2018/01/11 11:54:41:0050 Full: 71,588.59 KB, To download: 1,243.39 KB (2%)\n\n   4MB:\n\n   2018/01/11 11:31:43:0440 Full: 70,303.55 KB, To download: 4,843.27 KB (7%)\n   2018/01/11 11:31:43:0435 File has 234 changed blocks\n\n   */\n  archiveOptions.dictSize = 1\n  // solid compression leads to a lot of changed blocks\n  archiveOptions.solid = false\n  // do not allow to change compression level to avoid different packages\n  archiveOptions.compression = \"normal\"\n  return archiveOptions\n}\n\nexport async function appendBlockmap(file: string): Promise<BlockMapDataHolder> {\n  log.info({file: log.filePath(file)}, \"building embedded block map\")\n  return JSON.parse(await exec(await getAppBuilderTool(), [\"blockmap\", \"--input\", file, \"--compression\", \"deflate\"]))\n}\n\nexport async function createBlockmap(file: string, target: Target, packager: PlatformPackager<any>, safeArtifactName: string | null): Promise<BlockMapDataHolder> {\n  const blockMapFile = `${file}${BLOCK_MAP_FILE_SUFFIX}`\n  log.info({blockMapFile: log.filePath(blockMapFile)}, \"building block map\")\n  const updateInfo: BlockMapDataHolder = JSON.parse(await exec(await getAppBuilderTool(), [\"blockmap\", \"--input\", file, \"--output\", blockMapFile]))\n  packager.info.dispatchArtifactCreated({\n    file: blockMapFile,\n    safeArtifactName: `${safeArtifactName}${BLOCK_MAP_FILE_SUFFIX}`,\n    target,\n    arch: null,\n    packager,\n    updateInfo,\n  })\n  return updateInfo\n}"]}
