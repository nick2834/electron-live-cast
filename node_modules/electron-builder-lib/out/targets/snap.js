"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bluebirdLst;

function _load_bluebirdLst() {
    return _bluebirdLst = require("bluebird-lst");
}

var _bluebirdLst2;

function _load_bluebirdLst2() {
    return _bluebirdLst2 = _interopRequireDefault(require("bluebird-lst"));
}

var _builderUtil;

function _load_builderUtil() {
    return _builderUtil = require("builder-util");
}

var _fs;

function _load_fs() {
    return _fs = require("builder-util/out/fs");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _path = _interopRequireWildcard(require("path"));

var _builderUtilRuntime;

function _load_builderUtilRuntime() {
    return _builderUtilRuntime = require("builder-util-runtime");
}

var _core;

function _load_core() {
    return _core = require("../core");
}

var _targetUtil;

function _load_targetUtil() {
    return _targetUtil = require("./targetUtil");
}

var _tools;

function _load_tools() {
    return _tools = require("./tools");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// usr/share/fonts is required, cannot run otherwise
const unnecessaryFiles = ["usr/share/doc", "usr/share/man", "usr/share/icons", "usr/share/bash-completion", "usr/share/lintian", "usr/share/dh-python", "usr/share/python3", "usr/lib/python*", "usr/bin/python*"];
// libxss1, libasound2, gconf2 - was "error while loading shared libraries: libXss.so.1" on Xubuntu 16.04
const defaultStagePackages = ["libasound2", "libgconf2-4", "libnotify4", "libnspr4", "libnss3", "libpcre3", "libpulse0", "libxss1", "libxtst6"];
const defaultPlugs = ["desktop", "desktop-legacy", "home", "x11", "unity7", "browser-support", "network", "gsettings", "pulseaudio", "opengl"];
class SnapTarget extends (_core || _load_core()).Target {
    constructor(name, packager, helper, outDir) {
        super(name);
        this.packager = packager;
        this.helper = helper;
        this.outDir = outDir;
        this.options = Object.assign({}, this.packager.platformSpecificBuildOptions, this.packager.config[this.name]);
        this.isUsePrepackedSnap = true;
    }
    replaceDefault(inList, defaultList) {
        const result = (0, (_builderUtil || _load_builderUtil()).replaceDefault)(inList, defaultList);
        if (result !== defaultList) {
            this.isUsePrepackedSnap = false;
        }
        return result;
    }
    build(appOutDir, arch) {
        var _this = this;

        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {
            const packager = _this.packager;
            const appInfo = packager.appInfo;
            const options = _this.options;
            const snapName = packager.executableName.toLowerCase();
            const buildPackages = (0, (_builderUtilRuntime || _load_builderUtilRuntime()).asArray)(options.buildPackages);
            const isUseDocker = process.platform !== "linux" || (0, (_builderUtil || _load_builderUtil()).isEnvTrue)(process.env.SNAP_USE_DOCKER);
            _this.isUsePrepackedSnap = arch === (_builderUtil || _load_builderUtil()).Arch.x64 && buildPackages.length === 0;
            const snap = {
                name: snapName,
                version: appInfo.version,
                summary: options.summary || appInfo.productName,
                description: _this.helper.getDescription(options),
                confinement: options.confinement || "strict",
                grade: options.grade || "stable",
                apps: {
                    [snapName]: {
                        command: `desktop-launch $SNAP/${packager.executableName}`,
                        environment: Object.assign({ TMPDIR: "$XDG_RUNTIME_DIR" }, options.environment),
                        plugs: _this.replaceDefault(options.plugs, defaultPlugs)
                    }
                },
                parts: {
                    app: {
                        plugin: "dump",
                        "stage-packages": _this.replaceDefault(options.stagePackages, defaultStagePackages),
                        source: isUseDocker ? "/appOutDir" : appOutDir,
                        after: _this.replaceDefault(options.after, ["desktop-gtk2"])
                    }
                }
            };
            const wrapperFileName = `command-${packager.executableName}.wrapper`;
            if (_this.isUsePrepackedSnap) {
                delete snap.parts;
                snap.apps[snapName].command = wrapperFileName;
            }
            const snapFileName = `${snap.name}_${snap.version}_${(0, (_builderUtil || _load_builderUtil()).toLinuxArchString)(arch)}.snap`;
            const artifactPath = _path.join(_this.outDir, snapFileName);
            _this.logBuilding("snap", artifactPath, arch);
            if (options.assumes != null) {
                snap.assumes = (0, (_builderUtilRuntime || _load_builderUtilRuntime()).asArray)(options.assumes);
            }
            const stageDir = yield (0, (_targetUtil || _load_targetUtil()).createStageDir)(_this, packager, arch);
            // snapcraft.yaml inside a snap directory
            const snapDir = _path.join(stageDir.dir, "snap");
            const snapMetaDir = _this.isUsePrepackedSnap ? _path.join(stageDir.dir, "meta") : snapDir;
            yield _this.helper.icons;
            if (_this.helper.maxIconPath != null) {
                if (!_this.isUsePrepackedSnap) {
                    snap.icon = "snap/gui/icon.png";
                }
                yield (0, (_fs || _load_fs()).copyFile)(_this.helper.maxIconPath, _path.join(snapMetaDir, "gui", "icon.png"));
            }
            const hooksDir = yield packager.getResource(options.hooks, "snap-hooks");
            if (hooksDir != null) {
                yield (0, (_fs || _load_fs()).copyDir)(hooksDir, _path.join(snapMetaDir, "hooks"), {
                    isUseHardLink: (_fs || _load_fs()).USE_HARD_LINKS
                });
            }
            const desktopFile = _path.join(snapMetaDir, "gui", `${snap.name}.desktop`);
            yield _this.helper.writeDesktopEntry(_this.options, packager.executableName, desktopFile, {
                // tslint:disable:no-invalid-template-strings
                Icon: "${SNAP}/meta/gui/icon.png"
            });
            if (packager.packagerOptions.effectiveOptionComputed != null && (yield packager.packagerOptions.effectiveOptionComputed({ snap, desktopFile }))) {
                return;
            }
            const snapcraftFile = _path.join(snapMetaDir, _this.isUsePrepackedSnap ? "snap.yaml" : "snapcraft.yaml");
            yield (0, (_fsExtraP || _load_fsExtraP()).outputFile)(snapcraftFile, (0, (_builderUtil || _load_builderUtil()).serializeToYaml)(snap));
            if (_this.isUsePrepackedSnap) {
                // noinspection SpellCheckingInspection
                yield (0, (_fsExtraP || _load_fsExtraP()).writeFile)(_path.join(stageDir.dir, wrapperFileName), `#!/bin/sh
export PATH="$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$SNAP/lib:$SNAP/usr/lib:$SNAP/lib/x86_64-linux-gnu:$SNAP/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH="$SNAP/usr/lib/x86_64-linux-gnu/mesa-egl:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH="$SNAP/usr/lib/x86_64-linux-gnu:$SNAP/usr/lib/x86_64-linux-gnu/pulseaudio:$LD_LIBRARY_PATH"
export LD_LIBRARY_PATH=$SNAP_LIBRARY_PATH:$LD_LIBRARY_PATH
exec "desktop-launch" "$SNAP/${packager.executableName}" "$@"
`, { mode: "0755" });
                yield (0, (_fs || _load_fs()).copyDir)((yield (0, (_tools || _load_tools()).getSnapTemplate)()), stageDir.dir, {
                    isUseHardLink: (_fs || _load_fs()).USE_HARD_LINKS
                });
                yield (0, (_fs || _load_fs()).copyDirUsingHardLinks)(appOutDir, stageDir.dir);
            }
            if (isUseDocker) {
                if (_this.isUsePrepackedSnap) {
                    yield _this.buildUsingDockerAndPrepackedSnap(snapFileName, stageDir);
                } else {
                    yield _this.buildUsingDocker(options, arch, snapFileName, stageDir, appOutDir);
                }
            } else {
                yield _this.buildWithoutDocker(buildPackages, stageDir.dir, arch, artifactPath);
            }
            yield stageDir.cleanup();
            packager.dispatchArtifactCreated(artifactPath, _this, arch);
        })();
    }
    buildWithoutDocker(buildPackages, stageDir, arch, artifactPath) {
        var _this2 = this;

        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {
            if (buildPackages.length > 0) {
                const notInstalledPackages = yield (_bluebirdLst2 || _load_bluebirdLst2()).default.filter(buildPackages, function (it) {
                    return (0, (_builderUtil || _load_builderUtil()).exec)("dpkg", ["-s", it]).then(function (result) {
                        return result.includes("is not installed");
                    });
                });
                if (notInstalledPackages.length > 0) {
                    yield (0, (_builderUtil || _load_builderUtil()).spawn)("apt-get", ["-qq", "update"]);
                    yield (0, (_builderUtil || _load_builderUtil()).spawn)("apt-get", ["-qq", "install", "--no-install-recommends"].concat(notInstalledPackages));
                }
            }
            const spawnOptions = {
                cwd: stageDir,
                stdio: ["ignore", "inherit", "inherit"]
            };
            let primeDir;
            if (_this2.isUsePrepackedSnap) {
                primeDir = stageDir;
            } else {
                yield (0, (_builderUtil || _load_builderUtil()).spawn)("snapcraft", ["prime", "--target-arch", (0, (_builderUtil || _load_builderUtil()).toLinuxArchString)(arch)], spawnOptions);
                primeDir = stageDir + _path.sep + "prime";
                yield (0, (_builderUtil || _load_builderUtil()).exec)("/bin/bash", ["-c", `rm -rf ${unnecessaryFiles.join(" ")}`], {
                    cwd: primeDir
                });
            }
            yield (0, (_builderUtil || _load_builderUtil()).spawn)("snapcraft", ["pack", primeDir, "--output", artifactPath], spawnOptions);
        })();
    }
    buildUsingDockerAndPrepackedSnap(snapFileName, stageDir) {
        var _this3 = this;

        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {
            yield (0, (_builderUtil || _load_builderUtil()).spawn)("docker", ["run", "--rm",
            // dist dir can be outside of project dir
            "-v", `${_this3.outDir}:/out`, "-v", `${stageDir.dir}:/stage:ro`, "electronuserland/builder:latest", "/bin/bash", "-c", `snapcraft pack /stage --output /out/${snapFileName}`], {
                cwd: _this3.packager.info.projectDir,
                stdio: ["ignore", "inherit", "inherit"]
            });
        })();
    }
    buildUsingDocker(options, arch, snapFileName, stageDir, appOutDir) {
        var _this4 = this;

        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {
            const commands = [];
            if (options.buildPackages != null && options.buildPackages.length > 0) {
                commands.push(`apt-get install --no-install-recommends -y ${options.buildPackages.join(" ")}`);
            }
            // copy stage to linux fs to avoid performance issues (https://docs.docker.com/docker-for-mac/osxfs-caching/)
            commands.push("cp -R /stage /s/");
            commands.push("cd /s");
            commands.push(`snapcraft prime --target-arch ${(0, (_builderUtil || _load_builderUtil()).toLinuxArchString)(arch)}`);
            commands.push(`rm -rf ${unnecessaryFiles.map(function (it) {
                return `prime/${it}`;
            }).join(" ")}`);
            commands.push(`snapcraft pack /s/prime --output /out/${snapFileName}`);
            yield (0, (_builderUtil || _load_builderUtil()).spawn)("docker", ["run", "--rm", "-v", `${_this4.packager.info.projectDir}:/project:delegated`,
            // dist dir can be outside of project dir
            "-v", `${_this4.outDir}:/out`, "-v", `${stageDir.dir}:/stage:ro`, "-v", `${appOutDir}:/appOutDir:ro`, "electronuserland/builder:latest", "/bin/bash", "-c", commands.join(" && ")], {
                cwd: _this4.packager.info.projectDir,
                stdio: ["ignore", "inherit", "inherit"]
            });
        })();
    }
}
exports.default = SnapTarget; //# sourceMappingURL=snap.js.map