{"version":3,"file":"linuxPackager.js","sourceRoot":"","sources":["../src/linuxPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, AsyncTaskManager, log } from \"builder-util\"\nimport { rename } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { AfterPackContext } from \"./configuration\"\nimport { DIR_TARGET, Platform, Target, TargetSpecificOptions } from \"./core\"\nimport { LinuxConfiguration } from \"./options/linuxOptions\"\nimport { Packager } from \"./packager\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { RemoteBuilder } from \"./remoteBuilder/RemoteBuilder\"\nimport AppImageTarget from \"./targets/AppImageTarget\"\nimport FpmTarget from \"./targets/fpm\"\nimport { LinuxTargetHelper } from \"./targets/LinuxTargetHelper\"\nimport SnapTarget from \"./targets/snap\"\nimport { createCommonTarget } from \"./targets/targetFactory\"\n\nexport class LinuxPackager extends PlatformPackager<LinuxConfiguration> {\n  readonly executableName: string\n\n  constructor(info: Packager) {\n    super(info, Platform.LINUX)\n\n    const executableName = this.platformSpecificBuildOptions.executableName\n    this.executableName = executableName == null ? this.appInfo.sanitizedName.toLowerCase() : sanitizeFileName(executableName)\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"appimage\"]\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    let helper: LinuxTargetHelper | null\n    const getHelper = () => {\n      if (helper == null) {\n        helper = new LinuxTargetHelper(this)\n      }\n      return helper\n    }\n\n    let remoteBuilder: RemoteBuilder | null = null\n\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      const targetClass: typeof AppImageTarget | typeof SnapTarget | typeof FpmTarget | null = (() => {\n        switch (name) {\n          case \"appimage\":\n            return require(\"./targets/AppImageTarget\").default\n          case \"snap\":\n            return require(\"./targets/snap\").default\n          case \"deb\":\n          case \"rpm\":\n          case \"sh\":\n          case \"freebsd\":\n          case \"pacman\":\n          case \"apk\":\n          case \"p5p\":\n            return require(\"./targets/fpm\").default\n          default:\n            return null\n        }\n      })()\n\n      mapper(name, outDir => {\n        if (targetClass === null) {\n          return createCommonTarget(name, outDir, this)\n        }\n\n        const target = new targetClass(name, this, getHelper(), outDir)\n        if (process.platform === \"win32\" || process.env._REMOTE_BUILD) {\n          if (remoteBuilder == null) {\n            remoteBuilder = new RemoteBuilder(this)\n          }\n          // return remoteBuilder.buildTarget(this, arch, appOutDir, this.packager)\n          return new RemoteTarget(target, remoteBuilder)\n        }\n        return target\n      })\n    }\n  }\n\n  protected postInitApp(packContext: AfterPackContext): Promise<any> {\n    return rename(path.join(packContext.appOutDir, this.electronDistExecutableName), path.join(packContext.appOutDir, this.executableName))\n  }\n}\n\nclass RemoteTarget extends Target {\n  private buildTaskManager = new AsyncTaskManager(this.remoteBuilder.packager.info.cancellationToken)\n\n  get options(): TargetSpecificOptions | null | undefined {\n    return this.target.options\n  }\n\n  get outDir(): string {\n    return this.target.outDir\n  }\n\n  constructor(private readonly target: Target, private readonly remoteBuilder: RemoteBuilder) {\n    super(target.name, true /* all must be scheduled in time (so, on finishBuild RemoteBuilder will have all targets added - so, we must set isAsyncSupported to true (resolved promise is returned)) */)\n  }\n\n  async finishBuild() {\n    await this.buildTaskManager.awaitTasks()\n    await this.remoteBuilder.build()\n  }\n\n  build(appOutDir: string, arch: Arch) {\n    const promise = this.doBuild(appOutDir, arch)\n    this.buildTaskManager.addTask(promise)\n    return promise\n  }\n\n  private async doBuild(appOutDir: string, arch: Arch) {\n    log.info({target: this.target.name, arch: Arch[arch]}, \"scheduling remote build\")\n    await this.target.checkOptions()\n    this.remoteBuilder.scheduleBuild(this.target, arch, appOutDir)\n  }\n}"]}
